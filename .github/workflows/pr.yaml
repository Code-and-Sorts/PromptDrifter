name: PR Checks and TestPyPI Publish

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.13']

    steps:
    - name: ⤵️ Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 🚀 Install uv with caching
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: 🔗 Check lock file consistency (uv.lock)
      run: uv lock --check

    - name: ♻️ Cache .venv
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-venv-${{ hashFiles('pyproject.toml', 'scripts/pyproject.toml') }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-venv-${{ hashFiles('pyproject.toml', 'scripts/pyproject.toml') }}-
          ${{ runner.os }}-python-${{ matrix.python-version }}-venv-

    - name: ✨ Lint with Ruff using uv
      run: uv run ruff check .

    - name: ⬆️ Update version in pyproject.toml for PR
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        RUN_NUMBER: ${{ github.run_number }}
      run: cd scripts && uv run python update_pr_version.py

    - name: 🧱 Build project with uv (PR version)
      run: uv build

    - name: 🧪 Run tests with uv
      run: uv run pytest --cov=src/promptdrifter

    - name: ⬆️ Upload dist artifacts (from macOS only)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: python-package-dist
        path: dist/

  publish-to-testpypi:
    needs: build-and-test
    runs-on: macos-latest
    environment: testpypi
    if: github.event_name == 'pull_request'

    steps:
    - name: 🐍 Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: 🚀 Install uv
      uses: astral-sh/setup-uv@v6

    - name: ⤵️ Download dist artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-dist
        path: dist/

    - name: Install Twine
      run: uv pip install twine --system

    - name: 📦 Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: twine upload --verbose --repository testpypi dist/*.whl dist/*.tar.gz

    - name: Read version for comment
      id: version_reader
      run: echo "published_version=$(cat dist/VERSION.txt)" >> $GITHUB_OUTPUT

    - name: 💬 Comment on PR with deployed version
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const version = "${{ steps.version_reader.outputs.published_version }}";
          const prNumber = context.issue.number;
          if (!prNumber) {
            console.log("Could not get PR number, skipping comment.");
            return;
          }
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: `Successfully published version **${version}** to TestPyPI. 🚀`
          });
